# General info
SHELL       = @SHELL@
prefix      = @prefix@
exec_prefix = @exec_prefix@
bindir      = @bindir@
libdir      = @libdir@
datadir     = @datadir@
datarootdir = @datarootdir@
srcdir      = @srcdir@
VPATH       = $(srcdir)

# These may be overridden by make invocators
DESTDIR        =
GOSH           = "@GOSH@"
GAUCHE_CONFIG  = "@GAUCHE_CONFIG@"
GAUCHE_PACKAGE = "@GAUCHE_PACKAGE@"
INSTALL        = "@GAUCHE_INSTALL@" -C

HAVE_RSVG = @HAVE_RSVG@

# Other parameters
SOEXT  = @SOEXT@
OBJEXT = @OBJEXT@
EXEEXT = @EXEEXT@
LOCAL_PATHS = "@LOCAL_PATHS@"
CAIRO_CFLAGS = @CAIRO_CFLAGS@
CAIRO_LIBS = @CAIRO_LIBS@

LIBS = @LIBS@
DEFS = @DEFS@

ARCHFILES = gauche_cairo.$(SOEXT) 

TARGET    = $(ARCHFILES)
GENERATED = *.o *.gen.* *lib.c gauche_cairo.$(SOEXT)
CONFIG_GENERATED = Makefile 

GAUCHE_PKGINCDIR  = "$(DESTDIR)@GAUCHE_PKGINCDIR@"
GAUCHE_PKGLIBDIR  = "$(DESTDIR)@GAUCHE_PKGLIBDIR@"
GAUCHE_PKGARCHDIR = "$(DESTDIR)@GAUCHE_PKGARCHDIR@"

SCRIPTDIR = "@SCRIPTDIR@"
OUTDIR = "@OUTDIR@"
GENSTUB = "@GENSTUB@"

MINGW_STATIC_LIBGCC = @MINGW_STATIC_LIBGCC@

cairo_TYPE_HDRS = cairo_type.gen.h	\
		  macro.stub.header	\

cairo_STUB_TYPE_HDRS = cairo_type.gen.stub.header \

cairo_SRCS = gauche_cairo.c \
	     cairolib.c \
	     cairo_type.gen.c	\

all : $(TARGET)
	@if test X$(HAVE_RSVG) != X; then (cd rsvg; $(MAKE) all); fi


#generate sutb -> c file
.SUFFIXES:.stub .c

.stub.c:
	$(GOSH) -I$(SCRIPTDIR) $(GENSTUB) $<


cairolib.c: $(cairo_STUB_TYPE_HDRS)

#generate type file
cairo_type.gen.c cairo_type.gen.h cairo_type.gen.stub.header: cairo_type.scm
	$(GOSH) -I$(SCRIPTDIR) cairo_type.scm

#compile core
gauche_cairo.$(SOEXT): $(cairo_SRCS) $(cairo_TYPE_HDRS) $(cairo_STUB_TYPE_HDRS)
	$(GAUCHE_PACKAGE) compile \
		--local=$(LOCAL_PATHS) \
		--verbose \
		--libs="$(CAIRO_LIBS) $(MINGW_STATIC_LIBGCC) $(LIBS)" \
		--cflags="$(DEFS) $(CAIRO_CFLAGS) -I$(GAUCHE_PKGINCDIR)" \
		gauche_cairo \
		$(cairo_SRCS)


check :
	@rm -f test.log
	$(GOSH) -I. -I$(srcdir) test.scm > test.log
	@if test X$(HAVE_RSVG) != X; then (cd rsvg; $(MAKE) check); fi

install :
	$(INSTALL) -m 555 -T $(GAUCHE_PKGARCHDIR) $(ARCHFILES)
	@if test X$(HAVE_RSVG) != X; then (cd rsvg; $(MAKE) install); fi

uninstall :
	$(INSTALL) -U $(GAUCHE_PKGARCHDIR) $(ARCHFILES)
	@if test X$(HAVE_RSVG) != X; then (cd rsvg; $(MAKE) uninstall); fi

clean :
	$(GAUCHE_PACKAGE) compile --clean $(cairo_SRCS) 
	rm -rf $(TARGET) $(GENERATED) *~ test.log so_locations
	@if test X$(HAVE_RSVG) != X; then (cd rsvg; $(MAKE) clean); fi

distclean : clean
	rm -rf $(CONFIG_GENERATED)
	@if test X$(HAVE_RSVG) != X; then (cd rsvg; $(MAKE) distclean); fi

maintainer-clean : clean
	rm -rf $(CONFIG_GENERATED) configure VERSION
	@if test X$(HAVE_RSVG) != X; then (cd rsvg; $(MAKE) maintainer-clean); fi

collect :
	@if test "$(ARCHFILES)" != ""; then (cp -p -u $(ARCHFILES) $(OUTDIR)/dll/); fi
	@if test X$(HAVE_RSVG) != X; then (cd rsvg; $(MAKE) collect); fi

